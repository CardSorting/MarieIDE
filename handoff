Project Name: MarieIDE
Goal: Build an ultra-lightweight IDE with integrated AI composition, Git functionality, and a reliable checkpoint/version system — without the bloat or API restrictions of VS Code.
Primary Inspiration: Cursor’s Composer (AI-assisted IDE)

1. 🎯 Core Objectives
Objective	Description
Lightweight Architecture	Fast startup, low memory footprint, no Electron overhead if possible. Use native shell (Tauri, Bun, or Rust backend + web frontend).
AI Composition Panel (Composer)	Embedded AI text/code composition assistant with access to project files via accessible APIs.
Git Native Support	Built-in git commit, branch, and diff views — simplified UX for engineers and AI automation.
Checkpoints	Snapshot-based save/restore system separate from Git, enabling instant rollback to working states.
Version Restoration	Seamless restoration from checkpoints or Git commits with file-level or project-level granularity.
2. 🧠 Architecture Overview

Recommended Stack:

Frontend: React + TailwindCSS + Monaco Editor

Backend: Rust (via Tauri) or Node (via Bun/Deno)

Storage:

File system for project files

SQLite for checkpoints metadata

APIs: REST or local IPC layer for AI plugin access

High-level Structure:

/MarieIDE
 ├── /src
 │    ├── /frontend (React UI, Monaco)
 │    ├── /backend (Rust/Tauri services)
 │    ├── /ai (AI Composer API integration)
 │    └── /git (Git ops, checkpoint engine)
 ├── /config
 ├── /storage
 │    ├── checkpoints.db
 │    └── temp/
 └── main.ts / main.rs

3. 🧰 Core Functional Modules
3.1 Editor & Workspace

Monaco Editor integration

Multi-file tab interface

File tree navigation

Built-in terminal panel

AI Composer sidebar

3.2 AI Composer (Inspiration: Cursor’s Composer)

Input box for prompts (freeform natural language → code or edits)

File-aware context (current open file or selection)

Can create, modify, or explain code

History view for AI interactions

API endpoint to plug custom AI models

Example API call structure:

POST /ai/compose
{
  "context": "/src/utils/math.ts",
  "prompt": "Refactor this to use async/await",
  "model": "local" // or "openai:gpt-5" etc.
}

3.3 Git Integration

Lightweight wrapper around libgit2 or native git CLI

Git commands available in UI:

Init, Commit, Branch, Merge, Pull, Push, Diff

Visual file diff viewer

Commit history sidebar

Git REST endpoints:

POST /git/init
POST /git/commit
GET /git/status
GET /git/history
POST /git/checkout

3.4 Checkpoints System (Independent from Git)

Stored locally in /storage/checkpoints.db

Each checkpoint stores:

Timestamp

Changed file hashes

Metadata (author, message)

Diff from previous checkpoint

Snapshot compression for space efficiency

Checkpoint creation triggers:

Manual “Save Checkpoint” button

Auto-checkpoint every N minutes or after X edits

Restore checkpoint restores both file content and metadata

Checkpoint schema:

CREATE TABLE checkpoints (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  project_id TEXT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  summary TEXT,
  files JSON
);


Restore API:

POST /checkpoints/restore
{
  "checkpoint_id": 14
}

4. 💾 Version Restoration UX

Goals:

Instant restore of project or single file

Visual timeline of changes

Comparison diff before restore

Implementation:

“History” sidebar with:

Checkpoints timeline

Git commits list

Inline diff preview with restore button

Restore flow:

Select checkpoint or commit

Preview diff

Click "Restore File" or "Restore Project"

5. 🪶 Performance & Design Goals
Goal	Metric
Startup Time	< 1.5s
Memory Footprint	< 250MB on large projects
Checkpoint Create/Restore	< 2s
File Save Latency	< 100ms
Offline Support	Full (AI only disabled if offline)
6. ⚙️ Developer Notes

Avoid Electron; prefer Tauri (Rust backend, web frontend) for performance.

Use Monaco Editor for syntax highlighting and code intelligence.

AI Integration Layer: expose APIs so that external AI plugins can attach easily.

Build CLI Companion (MarieIDE-cli) for remote operations (init, commit, push, restore checkpoint).

7. 🧩 Future Extensions (Phase 2+)

Plugin marketplace (lightweight plugin API)

Cloud sync of checkpoints

Multi-user collaborative mode (WebRTC)

Inline AI “explain this code” features

8. 📋 Deliverables for MVP (Phase 1)

✅ Tauri app with file tree, Monaco editor, and terminal
✅ Working AI Composer sidebar (manual prompt + result insert)
✅ Git init/commit/push basic workflow
✅ Checkpoint creation and restoration
✅ Simple history timeline UI